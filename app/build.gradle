import groovy.swing.SwingBuilder

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'io.fabric'


buildscript {
    ext.kotlin_version = '1.0.6'
    ext.JUNIT_VERSION = '4.12'
    ext.DAGGER_VERSION = '2.6'
    repositories {
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'io.fabric.tools:gradle:1.21.7'
    }
}

repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    //android support stuff
    compile 'com.android.support:appcompat-v7:25.1.1'
    compile 'com.android.support:design:25.1.1'
    compile 'com.android.support:recyclerview-v7:25.1.1'
    //kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    //http and serialization
    compile 'com.squareup.okhttp3:okhttp:3.4.1'
    compile 'com.google.code.gson:gson:2.7'
    //Crash reporting
    compile('com.crashlytics.sdk.android:crashlytics:2.6.2@aar') {
        transitive = true;
    }
    compile 'org.jetbrains.anko:anko-sdk23:0.9'
    //reactive stuff
    compile 'io.reactivex:rxjava:1.1.0'
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'com.squareup.sqlbrite:sqlbrite:0.7.0'
    //tests
    testCompile "junit:junit:$JUNIT_VERSION"
    testCompile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha9'
}

android {
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
    compileSdkVersion 24
    buildToolsVersion '24.0.2'

    signingConfigs {
        release {
            storeFile file(System.getenv("YCREADER_KEYSTORE")) //need dummy file
            storePassword ""
            keyAlias 'ycreader'
            keyPassword ""
        }
    }

    defaultConfig {
        versionCode 15
        versionName "$versionCode"
        minSdkVersion 19
        targetSdkVersion 24
        multiDexEnabled true
    }
    productFlavors {
        modern {
            minSdkVersion 21
        }
        legacy {
            minSdkVersion 19
            signingConfig signingConfigs.release
        }
    }

    dexOptions {
        preDexLibraries true
        jumboMode false
    }
}

//prompt for passwords when needed
gradle.taskGraph.whenReady { taskGraph ->

    if (taskGraph.hasTask(':app:packageLegacyRelease')) {
        def passKeyPwInput = ''
        def passStorePwInput = ''

        new SwingBuilder().edt {
            dialog(modal: true, // build won't wait if not modal
                    title: 'Need some details...',
                    alwaysOnTop: true,
                    resizable: false,
                    locationRelativeTo: null, // center on screen
                    pack: true, // not sure
                    show: true // duh
            ) {
                vbox {

                    label(text: "Key password:")
                    def iKeyPwInput = passwordField()

                    label(text: "Store password:")
                    def iStorePwInput = passwordField()

                    button(defaultButton: true, text: 'OK', actionPerformed: {
                        passKeyPwInput = new String(iKeyPwInput.getPassword());
                        passStorePwInput = new String(iStorePwInput.getPassword());
                        dispose();
                    })
                }
            }
        }
        if (passKeyPwInput.size() <= 0 || passStorePwInput.size() <= 0) {
            throw new InvalidUserDataException("You must enter a password to proceed.")
        } else {
            System.console().println("Success")
        }
        android.signingConfigs.release.keyPassword passKeyPwInput
        android.signingConfigs.release.storePassword passStorePwInput
    }
}
